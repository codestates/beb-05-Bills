{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked23 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport axios from 'axios';\nimport shortId from 'shortid';\nimport { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nexport default function postSaga() {\n  var _marked, _marked2, _marked3, _marked4, _marked5, _marked6, _marked7, _marked8, _marked9, _marked10, _marked11, _marked12, _marked13, _marked14, _marked15, _marked16, _marked17, _marked18, _marked19, _marked20, _marked21, _marked22, loadUserPostsAPI, loadHashtagPostsAPI, loadPostAPI, loadPostsAPI, addPostAPI, removePostAPI, addCommentAPI, likePostAPI, unlikePostAPI, uploadImagesAPI, retweetAPI, likePost, unlikePost, loadPost, loadUserPosts, loadHashtagPosts, loadPosts, addPost, removePost, addComment, uploadImages, retweet, watchLikePost, watchUnlikePost, watchLoadPost, watchLoadPosts, watchLoadUserPosts, watchLoadHashtagPosts, watchAddPost, watchRemovePost, watchAddComment, watchUploadImages, watchRetweet;\n\n  return _regeneratorRuntime.wrap(function postSaga$(_context23) {\n    while (1) {\n      switch (_context23.prev = _context23.next) {\n        case 0:\n          watchRetweet = function _watchRetweet() {\n            return _regeneratorRuntime.wrap(function watchRetweet$(_context22) {\n              while (1) {\n                switch (_context22.prev = _context22.next) {\n                  case 0:\n                    _context22.next = 2;\n                    return takeLatest(RETWEET_REQUEST, retweet);\n\n                  case 2:\n                  case \"end\":\n                    return _context22.stop();\n                }\n              }\n            }, _marked22);\n          };\n\n          watchUploadImages = function _watchUploadImages() {\n            return _regeneratorRuntime.wrap(function watchUploadImages$(_context21) {\n              while (1) {\n                switch (_context21.prev = _context21.next) {\n                  case 0:\n                    _context21.next = 2;\n                    return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n                  case 2:\n                  case \"end\":\n                    return _context21.stop();\n                }\n              }\n            }, _marked21);\n          };\n\n          watchAddComment = function _watchAddComment() {\n            return _regeneratorRuntime.wrap(function watchAddComment$(_context20) {\n              while (1) {\n                switch (_context20.prev = _context20.next) {\n                  case 0:\n                    _context20.next = 2;\n                    return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n                  case 2:\n                  case \"end\":\n                    return _context20.stop();\n                }\n              }\n            }, _marked20);\n          };\n\n          watchRemovePost = function _watchRemovePost() {\n            return _regeneratorRuntime.wrap(function watchRemovePost$(_context19) {\n              while (1) {\n                switch (_context19.prev = _context19.next) {\n                  case 0:\n                    _context19.next = 2;\n                    return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n                  case 2:\n                  case \"end\":\n                    return _context19.stop();\n                }\n              }\n            }, _marked19);\n          };\n\n          watchAddPost = function _watchAddPost() {\n            return _regeneratorRuntime.wrap(function watchAddPost$(_context18) {\n              while (1) {\n                switch (_context18.prev = _context18.next) {\n                  case 0:\n                    _context18.next = 2;\n                    return takeLatest(ADD_POST_REQUEST, addPost);\n\n                  case 2:\n                  case \"end\":\n                    return _context18.stop();\n                }\n              }\n            }, _marked18);\n          };\n\n          watchLoadHashtagPosts = function _watchLoadHashtagPost() {\n            return _regeneratorRuntime.wrap(function watchLoadHashtagPosts$(_context17) {\n              while (1) {\n                switch (_context17.prev = _context17.next) {\n                  case 0:\n                    _context17.next = 2;\n                    return throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n\n                  case 2:\n                  case \"end\":\n                    return _context17.stop();\n                }\n              }\n            }, _marked17);\n          };\n\n          watchLoadUserPosts = function _watchLoadUserPosts() {\n            return _regeneratorRuntime.wrap(function watchLoadUserPosts$(_context16) {\n              while (1) {\n                switch (_context16.prev = _context16.next) {\n                  case 0:\n                    _context16.next = 2;\n                    return throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\n\n                  case 2:\n                  case \"end\":\n                    return _context16.stop();\n                }\n              }\n            }, _marked16);\n          };\n\n          watchLoadPosts = function _watchLoadPosts() {\n            return _regeneratorRuntime.wrap(function watchLoadPosts$(_context15) {\n              while (1) {\n                switch (_context15.prev = _context15.next) {\n                  case 0:\n                    _context15.next = 2;\n                    return throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n\n                  case 2:\n                  case \"end\":\n                    return _context15.stop();\n                }\n              }\n            }, _marked15);\n          };\n\n          watchLoadPost = function _watchLoadPost() {\n            return _regeneratorRuntime.wrap(function watchLoadPost$(_context14) {\n              while (1) {\n                switch (_context14.prev = _context14.next) {\n                  case 0:\n                    _context14.next = 2;\n                    return throttle(5000, LOAD_POST_REQUEST, loadPost);\n\n                  case 2:\n                  case \"end\":\n                    return _context14.stop();\n                }\n              }\n            }, _marked14);\n          };\n\n          watchUnlikePost = function _watchUnlikePost() {\n            return _regeneratorRuntime.wrap(function watchUnlikePost$(_context13) {\n              while (1) {\n                switch (_context13.prev = _context13.next) {\n                  case 0:\n                    _context13.next = 2;\n                    return takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n\n                  case 2:\n                  case \"end\":\n                    return _context13.stop();\n                }\n              }\n            }, _marked13);\n          };\n\n          watchLikePost = function _watchLikePost() {\n            return _regeneratorRuntime.wrap(function watchLikePost$(_context12) {\n              while (1) {\n                switch (_context12.prev = _context12.next) {\n                  case 0:\n                    _context12.next = 2;\n                    return takeLatest(LIKE_POST_REQUEST, likePost);\n\n                  case 2:\n                  case \"end\":\n                    return _context12.stop();\n                }\n              }\n            }, _marked12);\n          };\n\n          retweet = function _retweet(action) {\n            var result;\n            return _regeneratorRuntime.wrap(function retweet$(_context11) {\n              while (1) {\n                switch (_context11.prev = _context11.next) {\n                  case 0:\n                    _context11.prev = 0;\n                    _context11.next = 3;\n                    return call(retweetAPI, action.data);\n\n                  case 3:\n                    result = _context11.sent;\n                    _context11.next = 6;\n                    return put({\n                      type: RETWEET_SUCCESS,\n                      data: result.data\n                    });\n\n                  case 6:\n                    _context11.next = 13;\n                    break;\n\n                  case 8:\n                    _context11.prev = 8;\n                    _context11.t0 = _context11[\"catch\"](0);\n                    console.error(_context11.t0);\n                    _context11.next = 13;\n                    return put({\n                      type: RETWEET_FAILURE,\n                      error: _context11.t0.response.data\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context11.stop();\n                }\n              }\n            }, _marked11, null, [[0, 8]]);\n          };\n\n          uploadImages = function _uploadImages(action) {\n            var result;\n            return _regeneratorRuntime.wrap(function uploadImages$(_context10) {\n              while (1) {\n                switch (_context10.prev = _context10.next) {\n                  case 0:\n                    _context10.prev = 0;\n                    _context10.next = 3;\n                    return call(uploadImagesAPI, action.data);\n\n                  case 3:\n                    result = _context10.sent;\n                    _context10.next = 6;\n                    return put({\n                      type: UPLOAD_IMAGES_SUCCESS,\n                      data: result.data\n                    });\n\n                  case 6:\n                    _context10.next = 13;\n                    break;\n\n                  case 8:\n                    _context10.prev = 8;\n                    _context10.t0 = _context10[\"catch\"](0);\n                    console.error(_context10.t0);\n                    _context10.next = 13;\n                    return put({\n                      type: UPLOAD_IMAGES_FAILURE,\n                      error: _context10.t0.response.data\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context10.stop();\n                }\n              }\n            }, _marked10, null, [[0, 8]]);\n          };\n\n          addComment = function _addComment(action) {\n            var result;\n            return _regeneratorRuntime.wrap(function addComment$(_context9) {\n              while (1) {\n                switch (_context9.prev = _context9.next) {\n                  case 0:\n                    _context9.prev = 0;\n                    _context9.next = 3;\n                    return call(addCommentAPI, action.data);\n\n                  case 3:\n                    result = _context9.sent;\n                    _context9.next = 6;\n                    return put({\n                      type: ADD_COMMENT_SUCCESS,\n                      data: result.data\n                    });\n\n                  case 6:\n                    _context9.next = 13;\n                    break;\n\n                  case 8:\n                    _context9.prev = 8;\n                    _context9.t0 = _context9[\"catch\"](0);\n                    console.error(_context9.t0);\n                    _context9.next = 13;\n                    return put({\n                      type: ADD_COMMENT_FAILURE,\n                      error: _context9.t0.response.data\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context9.stop();\n                }\n              }\n            }, _marked9, null, [[0, 8]]);\n          };\n\n          removePost = function _removePost(action) {\n            var result;\n            return _regeneratorRuntime.wrap(function removePost$(_context8) {\n              while (1) {\n                switch (_context8.prev = _context8.next) {\n                  case 0:\n                    _context8.prev = 0;\n                    _context8.next = 3;\n                    return call(removePostAPI, action.data);\n\n                  case 3:\n                    result = _context8.sent;\n                    _context8.next = 6;\n                    return put({\n                      type: REMOVE_POST_SUCCESS,\n                      data: result.data\n                    });\n\n                  case 6:\n                    _context8.next = 8;\n                    return put({\n                      type: REMOVE_POST_OF_ME,\n                      data: action.data\n                    });\n\n                  case 8:\n                    _context8.next = 15;\n                    break;\n\n                  case 10:\n                    _context8.prev = 10;\n                    _context8.t0 = _context8[\"catch\"](0);\n                    console.error(_context8.t0);\n                    _context8.next = 15;\n                    return put({\n                      type: REMOVE_POST_FAILURE,\n                      error: _context8.t0.response.data\n                    });\n\n                  case 15:\n                  case \"end\":\n                    return _context8.stop();\n                }\n              }\n            }, _marked8, null, [[0, 10]]);\n          };\n\n          addPost = function _addPost(action) {\n            var result;\n            return _regeneratorRuntime.wrap(function addPost$(_context7) {\n              while (1) {\n                switch (_context7.prev = _context7.next) {\n                  case 0:\n                    _context7.prev = 0;\n                    _context7.next = 3;\n                    return call(addPostAPI, action.data);\n\n                  case 3:\n                    result = _context7.sent;\n                    _context7.next = 6;\n                    return put({\n                      type: ADD_POST_SUCCESS,\n                      data: result.data\n                    });\n\n                  case 6:\n                    _context7.next = 8;\n                    return put({\n                      type: ADD_POST_TO_ME,\n                      data: result.data.id\n                    });\n\n                  case 8:\n                    _context7.next = 15;\n                    break;\n\n                  case 10:\n                    _context7.prev = 10;\n                    _context7.t0 = _context7[\"catch\"](0);\n                    console.error(_context7.t0);\n                    _context7.next = 15;\n                    return put({\n                      type: ADD_POST_FAILURE,\n                      error: _context7.t0.response.data\n                    });\n\n                  case 15:\n                  case \"end\":\n                    return _context7.stop();\n                }\n              }\n            }, _marked7, null, [[0, 10]]);\n          };\n\n          loadPosts = function _loadPosts(action) {\n            var result;\n            return _regeneratorRuntime.wrap(function loadPosts$(_context6) {\n              while (1) {\n                switch (_context6.prev = _context6.next) {\n                  case 0:\n                    _context6.prev = 0;\n                    _context6.next = 3;\n                    return call(loadPostsAPI, action.lastId);\n\n                  case 3:\n                    result = _context6.sent;\n                    _context6.next = 6;\n                    return put({\n                      type: LOAD_POSTS_SUCCESS,\n                      data: result.data\n                    });\n\n                  case 6:\n                    _context6.next = 13;\n                    break;\n\n                  case 8:\n                    _context6.prev = 8;\n                    _context6.t0 = _context6[\"catch\"](0);\n                    console.error(_context6.t0);\n                    _context6.next = 13;\n                    return put({\n                      type: LOAD_POSTS_FAILURE,\n                      error: _context6.t0.response.data\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }\n            }, _marked6, null, [[0, 8]]);\n          };\n\n          loadHashtagPosts = function _loadHashtagPosts(action) {\n            var result;\n            return _regeneratorRuntime.wrap(function loadHashtagPosts$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    _context5.prev = 0;\n                    _context5.next = 3;\n                    return call(loadHashtagPostsAPI, action.data, action.lastId);\n\n                  case 3:\n                    result = _context5.sent;\n                    _context5.next = 6;\n                    return put({\n                      type: LOAD_HASHTAG_POSTS_SUCCESS,\n                      data: result.data\n                    });\n\n                  case 6:\n                    _context5.next = 13;\n                    break;\n\n                  case 8:\n                    _context5.prev = 8;\n                    _context5.t0 = _context5[\"catch\"](0);\n                    console.error(_context5.t0);\n                    _context5.next = 13;\n                    return put({\n                      type: LOAD_HASHTAG_POSTS_FAILURE,\n                      error: _context5.t0.response.data\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, _marked5, null, [[0, 8]]);\n          };\n\n          loadUserPosts = function _loadUserPosts(action) {\n            var result;\n            return _regeneratorRuntime.wrap(function loadUserPosts$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    _context4.prev = 0;\n                    _context4.next = 3;\n                    return call(loadUserPostsAPI, action.data, action.lastId);\n\n                  case 3:\n                    result = _context4.sent;\n                    _context4.next = 6;\n                    return put({\n                      type: LOAD_USER_POSTS_SUCCESS,\n                      data: result.data\n                    });\n\n                  case 6:\n                    _context4.next = 13;\n                    break;\n\n                  case 8:\n                    _context4.prev = 8;\n                    _context4.t0 = _context4[\"catch\"](0);\n                    console.error(_context4.t0);\n                    _context4.next = 13;\n                    return put({\n                      type: LOAD_USER_POSTS_FAILURE,\n                      error: _context4.t0.response.data\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, _marked4, null, [[0, 8]]);\n          };\n\n          loadPost = function _loadPost(action) {\n            var result;\n            return _regeneratorRuntime.wrap(function loadPost$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.prev = 0;\n                    _context3.next = 3;\n                    return call(loadPostAPI, action.data);\n\n                  case 3:\n                    result = _context3.sent;\n                    _context3.next = 6;\n                    return put({\n                      type: LOAD_POST_SUCCESS,\n                      data: result.data\n                    });\n\n                  case 6:\n                    _context3.next = 13;\n                    break;\n\n                  case 8:\n                    _context3.prev = 8;\n                    _context3.t0 = _context3[\"catch\"](0);\n                    console.error(_context3.t0);\n                    _context3.next = 13;\n                    return put({\n                      type: LOAD_POST_FAILURE,\n                      error: _context3.t0.response.data\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _marked3, null, [[0, 8]]);\n          };\n\n          unlikePost = function _unlikePost(action) {\n            var result;\n            return _regeneratorRuntime.wrap(function unlikePost$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _context2.prev = 0;\n                    _context2.next = 3;\n                    return call(unlikePostAPI, action.data);\n\n                  case 3:\n                    result = _context2.sent;\n                    _context2.next = 6;\n                    return put({\n                      type: UNLIKE_POST_SUCCESS,\n                      data: result.data\n                    });\n\n                  case 6:\n                    _context2.next = 13;\n                    break;\n\n                  case 8:\n                    _context2.prev = 8;\n                    _context2.t0 = _context2[\"catch\"](0);\n                    console.error(_context2.t0);\n                    _context2.next = 13;\n                    return put({\n                      type: UNLIKE_POST_FAILURE,\n                      error: _context2.t0.response.data\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _marked2, null, [[0, 8]]);\n          };\n\n          likePost = function _likePost(action) {\n            var result;\n            return _regeneratorRuntime.wrap(function likePost$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.next = 3;\n                    return call(likePostAPI, action.data);\n\n                  case 3:\n                    result = _context.sent;\n                    _context.next = 6;\n                    return put({\n                      type: LIKE_POST_SUCCESS,\n                      data: result.data\n                    });\n\n                  case 6:\n                    _context.next = 13;\n                    break;\n\n                  case 8:\n                    _context.prev = 8;\n                    _context.t0 = _context[\"catch\"](0);\n                    console.error(_context.t0);\n                    _context.next = 13;\n                    return put({\n                      type: LIKE_POST_FAILURE,\n                      error: _context.t0.response.data\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _marked, null, [[0, 8]]);\n          };\n\n          retweetAPI = function _retweetAPI(data) {\n            return axios.post(\"/post/\".concat(data, \"/retweet\"));\n          };\n\n          uploadImagesAPI = function _uploadImagesAPI(data) {\n            return axios.post('/post/images', data);\n          };\n\n          unlikePostAPI = function _unlikePostAPI(data) {\n            return axios[\"delete\"](\"/post/\".concat(data, \"/like\"));\n          };\n\n          likePostAPI = function _likePostAPI(data) {\n            return axios.patch(\"/post/\".concat(data, \"/like\")); // data를 서버에 보내는 것도 용량 차지하므로, params로 한번에 처리하자!\n          };\n\n          addCommentAPI = function _addCommentAPI(data) {\n            return axios.post(\"/post/\".concat(data.postId, \"/comment\"), data);\n          };\n\n          removePostAPI = function _removePostAPI(data) {\n            return axios[\"delete\"](\"/post/\".concat(data));\n          };\n\n          addPostAPI = function _addPostAPI(data) {\n            return axios.post('/post', data);\n          };\n\n          loadPostsAPI = function _loadPostsAPI(lastId) {\n            return axios.get(\"/posts?lastId=\".concat(lastId || 0)); // GET만의 이점: URL로 데이터 캐싱 가능\n          };\n\n          loadPostAPI = function _loadPostAPI(data) {\n            return axios.get(\"/post/\".concat(data));\n          };\n\n          loadHashtagPostsAPI = function _loadHashtagPostsAPI(data, lastId) {\n            return axios.get(\"/hashtag/\".concat(encodeURIComponent(data), \"?lastId=\").concat(lastId || 0));\n          };\n\n          loadUserPostsAPI = function _loadUserPostsAPI(data, lastId) {\n            return axios.get(\"/user/\".concat(data, \"/posts?lastId=\").concat(lastId || 0));\n          };\n\n          _marked = /*#__PURE__*/_regeneratorRuntime.mark(likePost), _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(unlikePost), _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(loadPost), _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(loadUserPosts), _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(loadHashtagPosts), _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts), _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(addPost), _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(removePost), _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(addComment), _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(uploadImages), _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(retweet), _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchLikePost), _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnlikePost), _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPost), _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts), _marked16 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadUserPosts), _marked17 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadHashtagPosts), _marked18 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost), _marked19 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost), _marked20 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment), _marked21 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadImages), _marked22 = /*#__PURE__*/_regeneratorRuntime.mark(watchRetweet);\n          _context23.next = 36;\n          return all([fork(watchLikePost), fork(watchUnlikePost), fork(watchLoadPost), fork(watchLoadPosts), fork(watchLoadUserPosts), fork(watchLoadHashtagPosts), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment), fork(watchUploadImages), fork(watchRetweet)]);\n\n        case 36:\n        case \"end\":\n          return _context23.stop();\n      }\n    }\n  }, _marked23);\n}","map":{"version":3,"sources":["/Users/odongjae/Desktop/2022Study/codestates/project/react-sns/front/sagas/post.js"],"names":["postSaga","axios","shortId","all","delay","fork","put","takeLatest","throttle","call","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","RETWEET_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadUserPostsAPI","loadHashtagPostsAPI","loadPostAPI","loadPostsAPI","addPostAPI","removePostAPI","addCommentAPI","likePostAPI","unlikePostAPI","uploadImagesAPI","retweetAPI","likePost","unlikePost","loadPost","loadUserPosts","loadHashtagPosts","loadPosts","addPost","removePost","addComment","uploadImages","retweet","watchLikePost","watchUnlikePost","watchLoadPost","watchLoadPosts","watchLoadUserPosts","watchLoadHashtagPosts","watchAddPost","watchRemovePost","watchAddComment","watchUploadImages","watchRetweet","action","data","result","type","console","error","response","id","lastId","post","patch","postId","get","encodeURIComponent"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport shortId from 'shortid';\nimport {\n  all,\n  delay,\n  fork,\n  put,\n  takeLatest,\n  throttle,\n  call,\n} from 'redux-saga/effects';\nimport {\n  ADD_COMMENT_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  LIKE_POST_FAILURE,\n  LIKE_POST_REQUEST,\n  LIKE_POST_SUCCESS,\n  LOAD_HASHTAG_POSTS_FAILURE,\n  LOAD_HASHTAG_POSTS_REQUEST,\n  LOAD_HASHTAG_POSTS_SUCCESS,\n  LOAD_POST_FAILURE,\n  LOAD_POST_REQUEST,\n  LOAD_POST_SUCCESS,\n  LOAD_POSTS_FAILURE,\n  LOAD_POSTS_REQUEST,\n  LOAD_POSTS_SUCCESS,\n  LOAD_USER_POSTS_FAILURE,\n  LOAD_USER_POSTS_REQUEST,\n  LOAD_USER_POSTS_SUCCESS,\n  REMOVE_POST_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  RETWEET_FAILURE,\n  RETWEET_REQUEST,\n  RETWEET_SUCCESS,\n  UNLIKE_POST_FAILURE,\n  UNLIKE_POST_REQUEST,\n  UNLIKE_POST_SUCCESS,\n  UPLOAD_IMAGES_FAILURE,\n  UPLOAD_IMAGES_REQUEST,\n  UPLOAD_IMAGES_SUCCESS,\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nexport default function* postSaga() {\n  function loadUserPostsAPI(data, lastId) {\n    return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);\n  }\n\n  function loadHashtagPostsAPI(data, lastId) {\n    return axios.get(\n      `/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`\n    );\n  }\n\n  function loadPostAPI(data) {\n    return axios.get(`/post/${data}`);\n  }\n\n  function loadPostsAPI(lastId) {\n    return axios.get(`/posts?lastId=${lastId || 0}`); // GET만의 이점: URL로 데이터 캐싱 가능\n  }\n\n  function addPostAPI(data) {\n    return axios.post('/post', data);\n  }\n\n  function removePostAPI(data) {\n    return axios.delete(`/post/${data}`);\n  }\n\n  function addCommentAPI(data) {\n    return axios.post(`/post/${data.postId}/comment`, data);\n  }\n\n  function likePostAPI(data) {\n    return axios.patch(`/post/${data}/like`); // data를 서버에 보내는 것도 용량 차지하므로, params로 한번에 처리하자!\n  }\n\n  function unlikePostAPI(data) {\n    return axios.delete(`/post/${data}/like`);\n  }\n\n  function uploadImagesAPI(data) {\n    return axios.post('/post/images', data);\n  }\n\n  function retweetAPI(data) {\n    return axios.post(`/post/${data}/retweet`);\n  }\n\n  function* likePost(action) {\n    try {\n      const result = yield call(likePostAPI, action.data);\n      yield put({ type: LIKE_POST_SUCCESS, data: result.data });\n    } catch (err) {\n      console.error(err);\n      yield put({ type: LIKE_POST_FAILURE, error: err.response.data });\n    }\n  }\n\n  function* unlikePost(action) {\n    try {\n      const result = yield call(unlikePostAPI, action.data);\n      yield put({ type: UNLIKE_POST_SUCCESS, data: result.data });\n    } catch (err) {\n      console.error(err);\n      yield put({ type: UNLIKE_POST_FAILURE, error: err.response.data });\n    }\n  }\n\n  function* loadPost(action) {\n    try {\n      const result = yield call(loadPostAPI, action.data);\n      yield put({\n        type: LOAD_POST_SUCCESS,\n        data: result.data,\n      });\n    } catch (err) {\n      console.error(err);\n      yield put({\n        type: LOAD_POST_FAILURE,\n        error: err.response.data,\n      });\n    }\n  }\n\n  function* loadUserPosts(action) {\n    try {\n      const result = yield call(loadUserPostsAPI, action.data, action.lastId);\n      yield put({\n        type: LOAD_USER_POSTS_SUCCESS,\n        data: result.data,\n      });\n    } catch (err) {\n      console.error(err);\n      yield put({\n        type: LOAD_USER_POSTS_FAILURE,\n        error: err.response.data,\n      });\n    }\n  }\n\n  function* loadHashtagPosts(action) {\n    try {\n      const result = yield call(\n        loadHashtagPostsAPI,\n        action.data,\n        action.lastId\n      );\n      yield put({\n        type: LOAD_HASHTAG_POSTS_SUCCESS,\n        data: result.data,\n      });\n    } catch (err) {\n      console.error(err);\n      yield put({\n        type: LOAD_HASHTAG_POSTS_FAILURE,\n        error: err.response.data,\n      });\n    }\n  }\n\n  function* loadPosts(action) {\n    try {\n      const result = yield call(loadPostsAPI, action.lastId);\n      yield put({\n        type: LOAD_POSTS_SUCCESS,\n        data: result.data,\n      });\n    } catch (err) {\n      console.error(err);\n      yield put({\n        type: LOAD_POSTS_FAILURE,\n        error: err.response.data,\n      });\n    }\n  }\n\n  function* addPost(action) {\n    try {\n      const result = yield call(addPostAPI, action.data);\n      yield put({\n        type: ADD_POST_SUCCESS,\n        data: result.data,\n      });\n      yield put({\n        type: ADD_POST_TO_ME,\n        data: result.data.id,\n      });\n    } catch (err) {\n      console.error(err);\n      yield put({\n        type: ADD_POST_FAILURE,\n        error: err.response.data,\n      });\n    }\n  }\n\n  function* removePost(action) {\n    try {\n      const result = yield call(removePostAPI, action.data);\n      yield put({\n        type: REMOVE_POST_SUCCESS,\n        data: result.data,\n      });\n      yield put({\n        type: REMOVE_POST_OF_ME,\n        data: action.data,\n      });\n    } catch (err) {\n      console.error(err);\n      yield put({\n        type: REMOVE_POST_FAILURE,\n        error: err.response.data,\n      });\n    }\n  }\n\n  function* addComment(action) {\n    try {\n      const result = yield call(addCommentAPI, action.data);\n      yield put({\n        type: ADD_COMMENT_SUCCESS,\n        data: result.data,\n      });\n    } catch (err) {\n      console.error(err);\n      yield put({\n        type: ADD_COMMENT_FAILURE,\n        error: err.response.data,\n      });\n    }\n  }\n\n  function* uploadImages(action) {\n    try {\n      const result = yield call(uploadImagesAPI, action.data);\n      yield put({\n        type: UPLOAD_IMAGES_SUCCESS,\n        data: result.data,\n      });\n    } catch (err) {\n      console.error(err);\n      yield put({\n        type: UPLOAD_IMAGES_FAILURE,\n        error: err.response.data,\n      });\n    }\n  }\n\n  function* retweet(action) {\n    try {\n      const result = yield call(retweetAPI, action.data);\n      yield put({\n        type: RETWEET_SUCCESS,\n        data: result.data,\n      });\n    } catch (err) {\n      console.error(err);\n      yield put({\n        type: RETWEET_FAILURE,\n        error: err.response.data,\n      });\n    }\n  }\n\n  function* watchLikePost() {\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\n  }\n  function* watchUnlikePost() {\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n  }\n  function* watchLoadPost() {\n    yield throttle(5000, LOAD_POST_REQUEST, loadPost);\n  }\n  function* watchLoadPosts() {\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n  }\n  function* watchLoadUserPosts() {\n    yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\n  }\n  function* watchLoadHashtagPosts() {\n    yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n  }\n  function* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n  }\n  function* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n  }\n\n  function* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n  }\n\n  function* watchUploadImages() {\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n  }\n\n  function* watchRetweet() {\n    yield takeLatest(RETWEET_REQUEST, retweet);\n  }\n\n  yield all([\n    fork(watchLikePost),\n    fork(watchUnlikePost),\n    fork(watchLoadPost),\n    fork(watchLoadPosts),\n    fork(watchLoadUserPosts),\n    fork(watchLoadHashtagPosts),\n    fork(watchAddPost),\n    fork(watchRemovePost),\n    fork(watchAddComment),\n    fork(watchUploadImages),\n    fork(watchRetweet),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}