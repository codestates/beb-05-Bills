{"ast":null,"code":"import produce from 'immer'; // import shortId from 'shortid';\n// import faker from 'faker';\n\nconst initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  // 이미지 업로드 경로\n  hasMorePost: true,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  // 게시글 추가 완료 시 true로 변경\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostNull: null,\n  addCommentLoading: false,\n  // 댓글 추가 완료 시 true로 변경\n  addCommentDone: false,\n  addCommentError: null,\n  likePostLoading: false,\n  // 좋아요 시도\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  // 좋아요 취소 시도\n  unlikePostDone: false,\n  unlikePostError: null,\n  uploadImagesLoading: false,\n  // 이미지 업로드 시도\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  // 리트윗 시도\n  retweetDone: false,\n  retweetError: null\n}; // export const generateDummyPost = (number) =>\n//   Array(number)\n//     .fill()\n//     .map(() => ({\n//       id: shortId.generate(),\n//       User: {\n//         id: shortId.generate(),\n//         nickname: faker.name.findName(),\n//       },\n//       content: faker.lorem.paragraph(),\n//       Images: [{ src: faker.image.image() }],\n//       Comments: [\n//         {\n//           User: {\n//             id: shortId.generate(),\n//             nickname: faker.name.findName(),\n//           },\n//           content: faker.lorem.sentence(),\n//         },\n//       ],\n//     }));\n\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n}); // const dummyPost = (data) => ({\n//   id: data.id,\n//   content: data.content,\n//   User: {\n//     id: 1,\n//     nickname: 'bban',\n//   },\n//   Images: [],\n//   Comments: [],\n// });\n// const dummyComment = (data) => ({\n//   User: {\n//     id: shortId.generate(),\n//     nickname: 'bban',\n//   },\n//   content: data,\n// });\n// 이전 상태를 action을 통해 다음 상태로 만들어 내는 함수(단, 불변성은 지키면서)\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case LOAD_POST_REQUEST:\n      draft.loadPostLoading = true;\n      draft.loadPostDone = false;\n      draft.loadPostError = null;\n      break;\n\n    case LOAD_POST_SUCCESS:\n      draft.loadPostLoading = false;\n      draft.loadPostDone = true;\n      draft.singlePost = action.data;\n      break;\n\n    case LOAD_POST_FAILURE:\n      draft.loadPostLoading = false;\n      draft.loadPostError = action.error;\n      break;\n\n    case LOAD_USER_POSTS_REQUEST: // 한 페이지에서 액션이 같이 실행되지 않는다면 중첩 가능 -> state 줄이자\n\n    case LOAD_HASHTAG_POSTS_REQUEST:\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n\n    case LOAD_USER_POSTS_SUCCESS:\n    case LOAD_HASHTAG_POSTS_SUCCESS:\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = draft.mainPosts.concat(action.data);\n      draft.hasMorePost = action.data.length === 10; // 남은 데이터가 10개 이하면 마지막 페이지\n\n      break;\n\n    case LOAD_USER_POSTS_FAILURE:\n    case LOAD_HASHTAG_POSTS_FAILURE:\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(action.data);\n      draft.imagePaths = [];\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break; // const postIndex = state.mainPosts.findIndex(\n        //   (v) => v.id === action.data.postId\n        // );\n        // const post = state.mainPosts[postIndex];\n        // const Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = { ...post, Comments };\n        // return {\n        //   ...state,\n        //   mainPosts,\n        //   // mainComments: [dummyComment, ...state.mainComments],\n        //   addCommentLoading: false,\n        //   addCommentDone: true,\n        // };\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    case LIKE_POST_REQUEST:\n      draft.likePostLoading = true;\n      draft.likePostDone = false;\n      draft.likePostError = null;\n      break;\n\n    case LIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers.push({\n          id: action.data.UserId\n        });\n        draft.likePostLoading = false;\n        draft.likePostDone = true;\n        break;\n      }\n\n    case LIKE_POST_FAILURE:\n      draft.likePostLoading = false;\n      draft.likePostError = action.error;\n      break;\n\n    case UNLIKE_POST_REQUEST:\n      draft.unlikePostLoading = true;\n      draft.unlikePostDone = false;\n      draft.unlikePostError = null;\n      break;\n\n    case UNLIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter(v => v.id !== action.data.UserId);\n        draft.unlikePostLoading = false;\n        draft.unlikePostDone = true;\n        break;\n      }\n\n    case UNLIKE_POST_FAILURE:\n      draft.unlikePostLoading = false;\n      draft.unlikePostError = action.error;\n      break;\n\n    case UPLOAD_IMAGES_REQUEST:\n      draft.uploadImagesLoading = true;\n      draft.uploadImagesDone = false;\n      draft.uploadImagesError = null;\n      break;\n\n    case UPLOAD_IMAGES_SUCCESS:\n      {\n        draft.imagePaths = action.data;\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        break;\n      }\n\n    case UPLOAD_IMAGES_FAILURE:\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesError = action.error;\n      break;\n\n    case RETWEET_REQUEST:\n      draft.retweetLoading = true;\n      draft.retweetDone = false;\n      draft.retweetError = null;\n      break;\n\n    case RETWEET_SUCCESS:\n      {\n        draft.retweetLoading = false;\n        draft.retweetDone = true;\n        draft.mainPosts.unshift(action.data);\n        break;\n      }\n\n    case RETWEET_FAILURE:\n      draft.retweetLoading = false;\n      draft.retweetError = action.error;\n      break;\n\n    case REMOVE_IMAGE:\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["/Users/odongjae/Desktop/2022Study/codestates/project/react-sns/front/reducers/post.js"],"names":["produce","initialState","mainPosts","imagePaths","hasMorePost","loadPostLoading","loadPostDone","loadPostError","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostNull","addCommentLoading","addCommentDone","addCommentError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_IMAGE","addPost","data","type","addComment","reducer","state","action","draft","singlePost","error","concat","length","unshift","removePostError","filter","v","id","PostId","post","find","Comments","Likers","push","UserId","i"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB,C,CACA;AACA;;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,EADQ;AAEnBC,EAAAA,UAAU,EAAE,EAFO;AAEH;AAChBC,EAAAA,WAAW,EAAE,IAHM;AAInBC,EAAAA,eAAe,EAAE,KAJE;AAKnBC,EAAAA,YAAY,EAAE,KALK;AAMnBC,EAAAA,aAAa,EAAE,IANI;AAOnBC,EAAAA,gBAAgB,EAAE,KAPC;AAQnBC,EAAAA,aAAa,EAAE,KARI;AASnBC,EAAAA,cAAc,EAAE,IATG;AAUnBC,EAAAA,cAAc,EAAE,KAVG;AAWnBC,EAAAA,WAAW,EAAE,KAXM;AAWC;AACpBC,EAAAA,YAAY,EAAE,IAZK;AAanBC,EAAAA,iBAAiB,EAAE,KAbA;AAcnBC,EAAAA,cAAc,EAAE,KAdG;AAenBC,EAAAA,cAAc,EAAE,IAfG;AAgBnBC,EAAAA,iBAAiB,EAAE,KAhBA;AAgBO;AAC1BC,EAAAA,cAAc,EAAE,KAjBG;AAkBnBC,EAAAA,eAAe,EAAE,IAlBE;AAmBnBC,EAAAA,eAAe,EAAE,KAnBE;AAmBK;AACxBC,EAAAA,YAAY,EAAE,KApBK;AAqBnBC,EAAAA,aAAa,EAAE,IArBI;AAsBnBC,EAAAA,iBAAiB,EAAE,KAtBA;AAsBO;AAC1BC,EAAAA,cAAc,EAAE,KAvBG;AAwBnBC,EAAAA,eAAe,EAAE,IAxBE;AAyBnBC,EAAAA,mBAAmB,EAAE,KAzBF;AAyBS;AAC5BC,EAAAA,gBAAgB,EAAE,KA1BC;AA2BnBC,EAAAA,iBAAiB,EAAE,IA3BA;AA4BnBC,EAAAA,cAAc,EAAE,KA5BG;AA4BI;AACvBC,EAAAA,WAAW,EAAE,KA7BM;AA8BnBC,EAAAA,YAAY,EAAE;AA9BK,CAArB,C,CAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AAEP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AAEP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;AAEP,OAAO,MAAMC,0BAA0B,GAAG,4BAAnC;AACP,OAAO,MAAMC,0BAA0B,GAAG,4BAAnC;AACP,OAAO,MAAMC,0BAA0B,GAAG,4BAAnC;AAEP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AAEP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AAEP,OAAO,MAAMC,YAAY,GAAG,cAArB;AAEP,OAAO,MAAMC,OAAO,GAAIC,IAAD,KAAW;AAChCC,EAAAA,IAAI,EAAExB,gBAD0B;AAEhCuB,EAAAA;AAFgC,CAAX,CAAhB;AAKP,OAAO,MAAME,UAAU,GAAIF,IAAD,KAAW;AACnCC,EAAAA,IAAI,EAAElB,mBAD6B;AAEnCiB,EAAAA;AAFmC,CAAX,CAAnB,C,CAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,MAAMG,OAAO,GAAG,CAACC,KAAK,GAAGtE,YAAT,EAAuBuE,MAAvB,KACdxE,OAAO,CAACuE,KAAD,EAASE,KAAD,IAAW;AACxB,UAAQD,MAAM,CAACJ,IAAf;AACE,SAAKpC,iBAAL;AACEyC,MAAAA,KAAK,CAACpE,eAAN,GAAwB,IAAxB;AACAoE,MAAAA,KAAK,CAACnE,YAAN,GAAqB,KAArB;AACAmE,MAAAA,KAAK,CAAClE,aAAN,GAAsB,IAAtB;AACA;;AACF,SAAK0B,iBAAL;AACEwC,MAAAA,KAAK,CAACpE,eAAN,GAAwB,KAAxB;AACAoE,MAAAA,KAAK,CAACnE,YAAN,GAAqB,IAArB;AACAmE,MAAAA,KAAK,CAACC,UAAN,GAAmBF,MAAM,CAACL,IAA1B;AACA;;AACF,SAAKjC,iBAAL;AACEuC,MAAAA,KAAK,CAACpE,eAAN,GAAwB,KAAxB;AACAoE,MAAAA,KAAK,CAAClE,aAAN,GAAsBiE,MAAM,CAACG,KAA7B;AACA;;AACF,SAAKrC,uBAAL,CAfF,CAegC;;AAC9B,SAAKG,0BAAL;AACA,SAAKN,kBAAL;AACEsC,MAAAA,KAAK,CAACjE,gBAAN,GAAyB,IAAzB;AACAiE,MAAAA,KAAK,CAAChE,aAAN,GAAsB,KAAtB;AACAgE,MAAAA,KAAK,CAAC/D,cAAN,GAAuB,IAAvB;AACA;;AACF,SAAK6B,uBAAL;AACA,SAAKG,0BAAL;AACA,SAAKN,kBAAL;AACEqC,MAAAA,KAAK,CAACjE,gBAAN,GAAyB,KAAzB;AACAiE,MAAAA,KAAK,CAAChE,aAAN,GAAsB,IAAtB;AACAgE,MAAAA,KAAK,CAACvE,SAAN,GAAkBuE,KAAK,CAACvE,SAAN,CAAgB0E,MAAhB,CAAuBJ,MAAM,CAACL,IAA9B,CAAlB;AACAM,MAAAA,KAAK,CAACrE,WAAN,GAAoBoE,MAAM,CAACL,IAAP,CAAYU,MAAZ,KAAuB,EAA3C,CAJF,CAIiD;;AAC/C;;AACF,SAAKrC,uBAAL;AACA,SAAKG,0BAAL;AACA,SAAKN,kBAAL;AACEoC,MAAAA,KAAK,CAACjE,gBAAN,GAAyB,KAAzB;AACAiE,MAAAA,KAAK,CAAC/D,cAAN,GAAuB8D,MAAM,CAACG,KAA9B;AACA;;AACF,SAAK/B,gBAAL;AACE6B,MAAAA,KAAK,CAAC9D,cAAN,GAAuB,IAAvB;AACA8D,MAAAA,KAAK,CAAC7D,WAAN,GAAoB,KAApB;AACA6D,MAAAA,KAAK,CAAC5D,YAAN,GAAqB,IAArB;AACA;;AACF,SAAKgC,gBAAL;AACE4B,MAAAA,KAAK,CAAC9D,cAAN,GAAuB,KAAvB;AACA8D,MAAAA,KAAK,CAAC7D,WAAN,GAAoB,IAApB;AACA6D,MAAAA,KAAK,CAACvE,SAAN,CAAgB4E,OAAhB,CAAwBN,MAAM,CAACL,IAA/B;AACAM,MAAAA,KAAK,CAACtE,UAAN,GAAmB,EAAnB;AACA;;AACF,SAAK2C,gBAAL;AACE2B,MAAAA,KAAK,CAAC9D,cAAN,GAAuB,KAAvB;AACA8D,MAAAA,KAAK,CAAC5D,YAAN,GAAqB2D,MAAM,CAACG,KAA5B;AACA;;AACF,SAAK5B,mBAAL;AACE0B,MAAAA,KAAK,CAAC3D,iBAAN,GAA0B,IAA1B;AACA2D,MAAAA,KAAK,CAAC1D,cAAN,GAAuB,KAAvB;AACA0D,MAAAA,KAAK,CAACM,eAAN,GAAwB,IAAxB;AACA;;AACF,SAAK/B,mBAAL;AACEyB,MAAAA,KAAK,CAAC3D,iBAAN,GAA0B,KAA1B;AACA2D,MAAAA,KAAK,CAAC1D,cAAN,GAAuB,IAAvB;AACA0D,MAAAA,KAAK,CAACvE,SAAN,GAAkBuE,KAAK,CAACvE,SAAN,CAAgB8E,MAAhB,CACfC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASV,MAAM,CAACL,IAAP,CAAYgB,MADZ,CAAlB;AAGA;;AACF,SAAKlC,mBAAL;AACEwB,MAAAA,KAAK,CAAC3D,iBAAN,GAA0B,KAA1B;AACA2D,MAAAA,KAAK,CAACM,eAAN,GAAwBP,MAAM,CAACG,KAA/B;AACA;;AACF,SAAKzB,mBAAL;AACEuB,MAAAA,KAAK,CAACxD,iBAAN,GAA0B,IAA1B;AACAwD,MAAAA,KAAK,CAACvD,cAAN,GAAuB,KAAvB;AACAuD,MAAAA,KAAK,CAACtD,eAAN,GAAwB,IAAxB;AACA;;AACF,SAAKgC,mBAAL;AAA0B;AACxB,cAAMiC,IAAI,GAAGX,KAAK,CAACvE,SAAN,CAAgBmF,IAAhB,CAAsBJ,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASV,MAAM,CAACL,IAAP,CAAYgB,MAAjD,CAAb;AACAC,QAAAA,IAAI,CAACE,QAAL,CAAcR,OAAd,CAAsBN,MAAM,CAACL,IAA7B;AACAM,QAAAA,KAAK,CAACxD,iBAAN,GAA0B,KAA1B;AACAwD,QAAAA,KAAK,CAACvD,cAAN,GAAuB,IAAvB;AACA,cALwB,CAMxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AACD,SAAKkC,mBAAL;AACEqB,MAAAA,KAAK,CAACxD,iBAAN,GAA0B,KAA1B;AACAwD,MAAAA,KAAK,CAACtD,eAAN,GAAwBqD,MAAM,CAACG,KAA/B;AACA;;AACF,SAAKtB,iBAAL;AACEoB,MAAAA,KAAK,CAACrD,eAAN,GAAwB,IAAxB;AACAqD,MAAAA,KAAK,CAACpD,YAAN,GAAqB,KAArB;AACAoD,MAAAA,KAAK,CAACnD,aAAN,GAAsB,IAAtB;AACA;;AACF,SAAKgC,iBAAL;AAAwB;AACtB,cAAM8B,IAAI,GAAGX,KAAK,CAACvE,SAAN,CAAgBmF,IAAhB,CAAsBJ,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASV,MAAM,CAACL,IAAP,CAAYgB,MAAjD,CAAb;AACAC,QAAAA,IAAI,CAACG,MAAL,CAAYC,IAAZ,CAAiB;AAAEN,UAAAA,EAAE,EAAEV,MAAM,CAACL,IAAP,CAAYsB;AAAlB,SAAjB;AACAhB,QAAAA,KAAK,CAACrD,eAAN,GAAwB,KAAxB;AACAqD,QAAAA,KAAK,CAACpD,YAAN,GAAqB,IAArB;AACA;AACD;;AACD,SAAKkC,iBAAL;AACEkB,MAAAA,KAAK,CAACrD,eAAN,GAAwB,KAAxB;AACAqD,MAAAA,KAAK,CAACnD,aAAN,GAAsBkD,MAAM,CAACG,KAA7B;AACA;;AACF,SAAKnB,mBAAL;AACEiB,MAAAA,KAAK,CAAClD,iBAAN,GAA0B,IAA1B;AACAkD,MAAAA,KAAK,CAACjD,cAAN,GAAuB,KAAvB;AACAiD,MAAAA,KAAK,CAAChD,eAAN,GAAwB,IAAxB;AACA;;AACF,SAAKgC,mBAAL;AAA0B;AACxB,cAAM2B,IAAI,GAAGX,KAAK,CAACvE,SAAN,CAAgBmF,IAAhB,CAAsBJ,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASV,MAAM,CAACL,IAAP,CAAYgB,MAAjD,CAAb;AACAC,QAAAA,IAAI,CAACG,MAAL,GAAcH,IAAI,CAACG,MAAL,CAAYP,MAAZ,CAAoBC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASV,MAAM,CAACL,IAAP,CAAYsB,MAA/C,CAAd;AACAhB,QAAAA,KAAK,CAAClD,iBAAN,GAA0B,KAA1B;AACAkD,QAAAA,KAAK,CAACjD,cAAN,GAAuB,IAAvB;AACA;AACD;;AACD,SAAKkC,mBAAL;AACEe,MAAAA,KAAK,CAAClD,iBAAN,GAA0B,KAA1B;AACAkD,MAAAA,KAAK,CAAChD,eAAN,GAAwB+C,MAAM,CAACG,KAA/B;AACA;;AACF,SAAKhB,qBAAL;AACEc,MAAAA,KAAK,CAAC/C,mBAAN,GAA4B,IAA5B;AACA+C,MAAAA,KAAK,CAAC9C,gBAAN,GAAyB,KAAzB;AACA8C,MAAAA,KAAK,CAAC7C,iBAAN,GAA0B,IAA1B;AACA;;AACF,SAAKgC,qBAAL;AAA4B;AAC1Ba,QAAAA,KAAK,CAACtE,UAAN,GAAmBqE,MAAM,CAACL,IAA1B;AACAM,QAAAA,KAAK,CAAC/C,mBAAN,GAA4B,KAA5B;AACA+C,QAAAA,KAAK,CAAC9C,gBAAN,GAAyB,IAAzB;AACA;AACD;;AACD,SAAKkC,qBAAL;AACEY,MAAAA,KAAK,CAAC/C,mBAAN,GAA4B,KAA5B;AACA+C,MAAAA,KAAK,CAAC7C,iBAAN,GAA0B4C,MAAM,CAACG,KAAjC;AACA;;AACF,SAAKb,eAAL;AACEW,MAAAA,KAAK,CAAC5C,cAAN,GAAuB,IAAvB;AACA4C,MAAAA,KAAK,CAAC3C,WAAN,GAAoB,KAApB;AACA2C,MAAAA,KAAK,CAAC1C,YAAN,GAAqB,IAArB;AACA;;AACF,SAAKgC,eAAL;AAAsB;AACpBU,QAAAA,KAAK,CAAC5C,cAAN,GAAuB,KAAvB;AACA4C,QAAAA,KAAK,CAAC3C,WAAN,GAAoB,IAApB;AACA2C,QAAAA,KAAK,CAACvE,SAAN,CAAgB4E,OAAhB,CAAwBN,MAAM,CAACL,IAA/B;AACA;AACD;;AACD,SAAKH,eAAL;AACES,MAAAA,KAAK,CAAC5C,cAAN,GAAuB,KAAvB;AACA4C,MAAAA,KAAK,CAAC1C,YAAN,GAAqByC,MAAM,CAACG,KAA5B;AACA;;AACF,SAAKV,YAAL;AACEQ,MAAAA,KAAK,CAACtE,UAAN,GAAmBsE,KAAK,CAACtE,UAAN,CAAiB6E,MAAjB,CAAwB,CAACC,CAAD,EAAIS,CAAJ,KAAUA,CAAC,KAAKlB,MAAM,CAACL,IAA/C,CAAnB;AACA;;AACF;AACE;AAnKJ;AAqKD,CAtKM,CADT;;AAwKA,eAAeG,OAAf","sourcesContent":["import produce from 'immer';\n// import shortId from 'shortid';\n// import faker from 'faker';\n\nconst initialState = {\n  mainPosts: [],\n  imagePaths: [], // 이미지 업로드 경로\n  hasMorePost: true,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false, // 게시글 추가 완료 시 true로 변경\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostNull: null,\n  addCommentLoading: false, // 댓글 추가 완료 시 true로 변경\n  addCommentDone: false,\n  addCommentError: null,\n  likePostLoading: false, // 좋아요 시도\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false, // 좋아요 취소 시도\n  unlikePostDone: false,\n  unlikePostError: null,\n  uploadImagesLoading: false, // 이미지 업로드 시도\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false, // 리트윗 시도\n  retweetDone: false,\n  retweetError: null,\n};\n\n// export const generateDummyPost = (number) =>\n//   Array(number)\n//     .fill()\n//     .map(() => ({\n//       id: shortId.generate(),\n//       User: {\n//         id: shortId.generate(),\n//         nickname: faker.name.findName(),\n//       },\n//       content: faker.lorem.paragraph(),\n//       Images: [{ src: faker.image.image() }],\n//       Comments: [\n//         {\n//           User: {\n//             id: shortId.generate(),\n//             nickname: faker.name.findName(),\n//           },\n//           content: faker.lorem.sentence(),\n//         },\n//       ],\n//     }));\n\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\n\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\n\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\n\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\n\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\n\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\n\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\n\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\n\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\n\nexport const addComment = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\n// const dummyPost = (data) => ({\n//   id: data.id,\n//   content: data.content,\n//   User: {\n//     id: 1,\n//     nickname: 'bban',\n//   },\n//   Images: [],\n//   Comments: [],\n// });\n\n// const dummyComment = (data) => ({\n//   User: {\n//     id: shortId.generate(),\n//     nickname: 'bban',\n//   },\n//   content: data,\n// });\n\n// 이전 상태를 action을 통해 다음 상태로 만들어 내는 함수(단, 불변성은 지키면서)\nconst reducer = (state = initialState, action) =>\n  produce(state, (draft) => {\n    switch (action.type) {\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n        break;\n      case LOAD_POST_SUCCESS:\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.singlePost = action.data;\n        break;\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostError = action.error;\n        break;\n      case LOAD_USER_POSTS_REQUEST: // 한 페이지에서 액션이 같이 실행되지 않는다면 중첩 가능 -> state 줄이자\n      case LOAD_HASHTAG_POSTS_REQUEST:\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_USER_POSTS_SUCCESS:\n      case LOAD_HASHTAG_POSTS_SUCCESS:\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.hasMorePost = action.data.length === 10; // 남은 데이터가 10개 이하면 마지막 페이지\n        break;\n      case LOAD_USER_POSTS_FAILURE:\n      case LOAD_HASHTAG_POSTS_FAILURE:\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data);\n        draft.imagePaths = [];\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(\n          (v) => v.id !== action.data.PostId\n        );\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n        // const postIndex = state.mainPosts.findIndex(\n        //   (v) => v.id === action.data.postId\n        // );\n        // const post = state.mainPosts[postIndex];\n        // const Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = { ...post, Comments };\n        // return {\n        //   ...state,\n        //   mainPosts,\n        //   // mainComments: [dummyComment, ...state.mainComments],\n        //   addCommentLoading: false,\n        //   addCommentDone: true,\n        // };\n      }\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n      case LIKE_POST_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n        post.Likers.push({ id: action.data.UserId });\n        draft.likePostLoading = false;\n        draft.likePostDone = true;\n        break;\n      }\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n      case UNLIKE_POST_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\n        draft.unlikePostLoading = false;\n        draft.unlikePostDone = true;\n        break;\n      }\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n      case UPLOAD_IMAGES_SUCCESS: {\n        draft.imagePaths = action.data;\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        break;\n      }\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n      case RETWEET_REQUEST:\n        draft.retweetLoading = true;\n        draft.retweetDone = false;\n        draft.retweetError = null;\n        break;\n      case RETWEET_SUCCESS: {\n        draft.retweetLoading = false;\n        draft.retweetDone = true;\n        draft.mainPosts.unshift(action.data);\n        break;\n      }\n      case RETWEET_FAILURE:\n        draft.retweetLoading = false;\n        draft.retweetError = action.error;\n        break;\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n        break;\n      default:\n        break;\n    }\n  });\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}