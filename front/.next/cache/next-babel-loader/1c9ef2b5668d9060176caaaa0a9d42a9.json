{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/odongjae/Desktop/2022Study/codestates/project/react-sns/front/components/PostForm.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef, useCallback, useMemo } from 'react';\nimport { Button, Form, Input } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useInput from '../hooks/useInput';\nimport { ADD_POST_REQUEST, addPost, REMOVE_IMAGE, UPLOAD_IMAGES_REQUEST } from '../reducers/post';\n\nvar PostForm = function PostForm() {\n  _s();\n\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      imagePaths = _useSelector.imagePaths,\n      addPostDone = _useSelector.addPostDone;\n\n  var formStyle = useMemo(function () {\n    '10px 0 20px';\n  }, []);\n  var uploadBtnStyle = useMemo(function () {\n    'right';\n  }, []);\n  var imgPathDivStyle = useMemo(function () {\n    'inline-block';\n  }, []);\n  var imgPreviewStyle = useMemo(function () {\n    '200px';\n  }, []);\n\n  var _useInput = useInput(''),\n      _useInput2 = _slicedToArray(_useInput, 3),\n      text = _useInput2[0],\n      onChangeText = _useInput2[1],\n      setText = _useInput2[2];\n\n  useEffect(function () {\n    if (addPostDone) {\n      setText('');\n    }\n  }, [addPostDone]);\n  var onSubmit = useCallback(function () {\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성하세요.');\n    }\n\n    var formData = new FormData();\n    imagePaths.forEach(function (p) {\n      formData.append('image', p);\n    });\n    formData.append('content', text);\n    return dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n  }, [text, imagePaths]);\n  var imageInput = useRef();\n  var onClickImageUpload = useCallback(function () {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  var onChangeImages = useCallback(function (e) {\n    // 이미지 업로드 대화상자에서 확인/취소를 클릭한 경우 호출됨\n    console.log('images', e.target.files); // e.target.files는 배열이 아니라 유사배열임.\n\n    var imageFormData = new FormData(); // FormData(): multipart 형식으로 전송해 준다.\n\n    [].forEach.call(e.target.files, function (f) {\n      // 유사배열 처리하고자 배열의 형식 빌려쓰기\n      imageFormData.append('image', f); // key: image, value: f\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  var onRemoveImage = useCallback(function (index) {\n    return function () {\n      dispatch({\n        type: REMOVE_IMAGE,\n        data: index\n      });\n    };\n  }, []);\n  return __jsx(Form, {\n    style: formStyle,\n    encType: \"multipart/form-data\",\n    onFinish: onSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, __jsx(Input.TextArea, {\n    value: text,\n    onChange: onChangeText,\n    maxLength: 140,\n    placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, __jsx(\"input\", {\n    type: \"file\",\n    multiple: true,\n    hidden: true,\n    ref: imageInput,\n    onChange: onChangeImages,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }), __jsx(Button, {\n    onClick: onClickImageUpload,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), __jsx(Button, {\n    type: \"primary\",\n    style: uploadBtnStyle,\n    htmlType: \"submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, \"\\uC9F9\\uC9F9\")), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, imagePaths.map(function (v, i) {\n    return __jsx(\"div\", {\n      key: v,\n      style: imgPathDivStyle,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }\n    }, __jsx(\"img\", {\n      src: \"http://localhost:3065/\".concat(v),\n      style: imgPreviewStyle,\n      alt: v,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }\n    }), __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }\n    }, __jsx(Button, {\n      onClick: onRemoveImage(i),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 15\n      }\n    }, \"\\uC81C\\uAC70\")));\n  })));\n};\n\n_s(PostForm, \"qI7oXy621jARp3cpNIGEklm8sZE=\", false, function () {\n  return [useDispatch, useSelector, useInput];\n});\n\n_c = PostForm;\nexport default PostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"sources":["/Users/odongjae/Desktop/2022Study/codestates/project/react-sns/front/components/PostForm.js"],"names":["React","useEffect","useRef","useCallback","useMemo","Button","Form","Input","useDispatch","useSelector","useInput","ADD_POST_REQUEST","addPost","REMOVE_IMAGE","UPLOAD_IMAGES_REQUEST","PostForm","dispatch","state","post","imagePaths","addPostDone","formStyle","uploadBtnStyle","imgPathDivStyle","imgPreviewStyle","text","onChangeText","setText","onSubmit","trim","alert","formData","FormData","forEach","p","append","type","data","imageInput","onClickImageUpload","current","click","onChangeImages","e","console","log","target","files","imageFormData","call","f","onRemoveImage","index","map","v","i"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useCallback, useMemo } from 'react';\nimport { Button, Form, Input } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useInput from '../hooks/useInput';\nimport {\n  ADD_POST_REQUEST,\n  addPost,\n  REMOVE_IMAGE,\n  UPLOAD_IMAGES_REQUEST,\n} from '../reducers/post';\n\nconst PostForm = () => {\n  const dispatch = useDispatch();\n  const { imagePaths, addPostDone } = useSelector((state) => state.post);\n  const formStyle = useMemo(() => {\n    '10px 0 20px';\n  }, []);\n  const uploadBtnStyle = useMemo(() => {\n    'right';\n  }, []);\n  const imgPathDivStyle = useMemo(() => {\n    'inline-block';\n  }, []);\n  const imgPreviewStyle = useMemo(() => {\n    '200px';\n  }, []);\n  const [text, onChangeText, setText] = useInput('');\n\n  useEffect(() => {\n    if (addPostDone) {\n      setText('');\n    }\n  }, [addPostDone]);\n\n  const onSubmit = useCallback(() => {\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성하세요.');\n    }\n    const formData = new FormData();\n    imagePaths.forEach((p) => {\n      formData.append('image', p);\n    });\n    formData.append('content', text);\n    return dispatch({ type: ADD_POST_REQUEST, data: formData });\n  }, [text, imagePaths]);\n  const imageInput = useRef();\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  const onChangeImages = useCallback((e) => {\n    // 이미지 업로드 대화상자에서 확인/취소를 클릭한 경우 호출됨\n    console.log('images', e.target.files); // e.target.files는 배열이 아니라 유사배열임.\n    const imageFormData = new FormData(); // FormData(): multipart 형식으로 전송해 준다.\n    [].forEach.call(e.target.files, (f) => {\n      // 유사배열 처리하고자 배열의 형식 빌려쓰기\n      imageFormData.append('image', f); // key: image, value: f\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData,\n    });\n  }, []);\n\n  const onRemoveImage = useCallback(\n    (index) => () => {\n      dispatch({ type: REMOVE_IMAGE, data: index });\n    },\n    []\n  );\n\n  return (\n    <Form style={formStyle} encType=\"multipart/form-data\" onFinish={onSubmit}>\n      <Input.TextArea\n        value={text}\n        onChange={onChangeText}\n        maxLength={140}\n        placeholder=\"어떤 신기한 일이 있었나요?\"\n      />\n      <div>\n        <input\n          type=\"file\"\n          multiple\n          hidden\n          ref={imageInput}\n          onChange={onChangeImages}\n        />\n        <Button onClick={onClickImageUpload}>이미지 업로드</Button>\n        <Button type=\"primary\" style={uploadBtnStyle} htmlType=\"submit\">\n          짹짹\n        </Button>\n      </div>\n      <div>\n        {imagePaths.map((v, i) => (\n          <div key={v} style={imgPathDivStyle}>\n            <img\n              src={`http://localhost:3065/${v}`}\n              style={imgPreviewStyle}\n              alt={v}\n            />\n            <div>\n              <Button onClick={onRemoveImage(i)}>제거</Button>\n            </div>\n          </div>\n        ))}\n      </div>\n    </Form>\n  );\n};\n\nexport default PostForm;\n"]},"metadata":{},"sourceType":"module"}