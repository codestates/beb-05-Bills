{"ast":null,"code":"import axios from 'axios';\nimport shortId from 'shortid';\nimport { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nexport default function* postSaga() {\n  function loadUserPostsAPI(data, lastId) {\n    return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);\n  }\n\n  function loadHashtagPostsAPI(data, lastId) {\n    return axios.get(`/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`);\n  }\n\n  function loadPostAPI(data) {\n    return axios.get(`/post/${data}`);\n  }\n\n  function loadPostsAPI(lastId) {\n    return axios.get(`/posts?lastId=${lastId || 0}`); // GET만의 이점: URL로 데이터 캐싱 가능\n  }\n\n  function addPostAPI(data) {\n    return axios.post('/post', data);\n  }\n\n  function removePostAPI(data) {\n    return axios.delete(`/post/${data}`);\n  }\n\n  function addCommentAPI(data) {\n    return axios.post(`/post/${data.postId}/comment`, data);\n  }\n\n  function likePostAPI(data) {\n    return axios.patch(`/post/${data}/like`); // data를 서버에 보내는 것도 용량 차지하므로, params로 한번에 처리하자!\n  }\n\n  function unlikePostAPI(data) {\n    return axios.delete(`/post/${data}/like`);\n  }\n\n  function uploadImagesAPI(data) {\n    return axios.post('/post/images', data);\n  }\n\n  function retweetAPI(data) {\n    return axios.post(`/post/${data}/retweet`);\n  }\n\n  function* likePost(action) {\n    try {\n      const result = yield call(likePostAPI, action.data);\n      yield put({\n        type: LIKE_POST_SUCCESS,\n        data: result.data\n      });\n    } catch (err) {\n      console.error(err);\n      yield put({\n        type: LIKE_POST_FAILURE,\n        error: err.response.data\n      });\n    }\n  }\n\n  function* unlikePost(action) {\n    try {\n      const result = yield call(unlikePostAPI, action.data);\n      yield put({\n        type: UNLIKE_POST_SUCCESS,\n        data: result.data\n      });\n    } catch (err) {\n      console.error(err);\n      yield put({\n        type: UNLIKE_POST_FAILURE,\n        error: err.response.data\n      });\n    }\n  }\n\n  function* loadPost(action) {\n    try {\n      const result = yield call(loadPostAPI, action.data);\n      yield put({\n        type: LOAD_POST_SUCCESS,\n        data: result.data\n      });\n    } catch (err) {\n      console.error(err);\n      yield put({\n        type: LOAD_POST_FAILURE,\n        error: err.response.data\n      });\n    }\n  }\n\n  function* loadUserPosts(action) {\n    try {\n      const result = yield call(loadUserPostsAPI, action.data, action.lastId);\n      yield put({\n        type: LOAD_USER_POSTS_SUCCESS,\n        data: result.data\n      });\n    } catch (err) {\n      console.error(err);\n      yield put({\n        type: LOAD_USER_POSTS_FAILURE,\n        error: err.response.data\n      });\n    }\n  }\n\n  function* loadHashtagPosts(action) {\n    try {\n      const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n      yield put({\n        type: LOAD_HASHTAG_POSTS_SUCCESS,\n        data: result.data\n      });\n    } catch (err) {\n      console.error(err);\n      yield put({\n        type: LOAD_HASHTAG_POSTS_FAILURE,\n        error: err.response.data\n      });\n    }\n  }\n\n  function* loadPosts(action) {\n    try {\n      const result = yield call(loadPostsAPI, action.lastId);\n      yield put({\n        type: LOAD_POSTS_SUCCESS,\n        data: result.data\n      });\n    } catch (err) {\n      console.error(err);\n      yield put({\n        type: LOAD_POSTS_FAILURE,\n        error: err.response.data\n      });\n    }\n  }\n\n  function* addPost(action) {\n    try {\n      const result = yield call(addPostAPI, action.data);\n      yield put({\n        type: ADD_POST_SUCCESS,\n        data: result.data\n      });\n      yield put({\n        type: ADD_POST_TO_ME,\n        data: result.data.id\n      });\n    } catch (err) {\n      console.error(err);\n      yield put({\n        type: ADD_POST_FAILURE,\n        error: err.response.data\n      });\n    }\n  }\n\n  function* removePost(action) {\n    try {\n      const result = yield call(removePostAPI, action.data);\n      yield put({\n        type: REMOVE_POST_SUCCESS,\n        data: result.data\n      });\n      yield put({\n        type: REMOVE_POST_OF_ME,\n        data: action.data\n      });\n    } catch (err) {\n      console.error(err);\n      yield put({\n        type: REMOVE_POST_FAILURE,\n        error: err.response.data\n      });\n    }\n  }\n\n  function* addComment(action) {\n    try {\n      const result = yield call(addCommentAPI, action.data);\n      yield put({\n        type: ADD_COMMENT_SUCCESS,\n        data: result.data\n      });\n    } catch (err) {\n      console.error(err);\n      yield put({\n        type: ADD_COMMENT_FAILURE,\n        error: err.response.data\n      });\n    }\n  }\n\n  function* uploadImages(action) {\n    try {\n      const result = yield call(uploadImagesAPI, action.data);\n      yield put({\n        type: UPLOAD_IMAGES_SUCCESS,\n        data: result.data\n      });\n    } catch (err) {\n      console.error(err);\n      yield put({\n        type: UPLOAD_IMAGES_FAILURE,\n        error: err.response.data\n      });\n    }\n  }\n\n  function* retweet(action) {\n    try {\n      const result = yield call(retweetAPI, action.data);\n      yield put({\n        type: RETWEET_SUCCESS,\n        data: result.data\n      });\n    } catch (err) {\n      console.error(err);\n      yield put({\n        type: RETWEET_FAILURE,\n        error: err.response.data\n      });\n    }\n  }\n\n  function* watchLikePost() {\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\n  }\n\n  function* watchUnlikePost() {\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n  }\n\n  function* watchLoadPost() {\n    yield throttle(5000, LOAD_POST_REQUEST, loadPost);\n  }\n\n  function* watchLoadPosts() {\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n  }\n\n  function* watchLoadUserPosts() {\n    yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\n  }\n\n  function* watchLoadHashtagPosts() {\n    yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n  }\n\n  function* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n  }\n\n  function* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n  }\n\n  function* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n  }\n\n  function* watchUploadImages() {\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n  }\n\n  function* watchRetweet() {\n    yield takeLatest(RETWEET_REQUEST, retweet);\n  }\n\n  yield all([fork(watchLikePost), fork(watchUnlikePost), fork(watchLoadPost), fork(watchLoadPosts), fork(watchLoadUserPosts), fork(watchLoadHashtagPosts), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment), fork(watchUploadImages), fork(watchRetweet)]);\n}","map":{"version":3,"sources":["/Users/odongjae/Desktop/2022Study/codestates/project/beb-05-Bills/front/sagas/post.js"],"names":["axios","shortId","all","delay","fork","put","takeLatest","throttle","call","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","RETWEET_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","postSaga","loadUserPostsAPI","data","lastId","get","loadHashtagPostsAPI","encodeURIComponent","loadPostAPI","loadPostsAPI","addPostAPI","post","removePostAPI","delete","addCommentAPI","postId","likePostAPI","patch","unlikePostAPI","uploadImagesAPI","retweetAPI","likePost","action","result","type","err","console","error","response","unlikePost","loadPost","loadUserPosts","loadHashtagPosts","loadPosts","addPost","id","removePost","addComment","uploadImages","retweet","watchLikePost","watchUnlikePost","watchLoadPost","watchLoadPosts","watchLoadUserPosts","watchLoadHashtagPosts","watchAddPost","watchRemovePost","watchAddComment","watchUploadImages","watchRetweet"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport shortId from 'shortid';\nimport {\n  all,\n  delay,\n  fork,\n  put,\n  takeLatest,\n  throttle,\n  call,\n} from 'redux-saga/effects';\nimport {\n  ADD_COMMENT_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  LIKE_POST_FAILURE,\n  LIKE_POST_REQUEST,\n  LIKE_POST_SUCCESS,\n  LOAD_HASHTAG_POSTS_FAILURE,\n  LOAD_HASHTAG_POSTS_REQUEST,\n  LOAD_HASHTAG_POSTS_SUCCESS,\n  LOAD_POST_FAILURE,\n  LOAD_POST_REQUEST,\n  LOAD_POST_SUCCESS,\n  LOAD_POSTS_FAILURE,\n  LOAD_POSTS_REQUEST,\n  LOAD_POSTS_SUCCESS,\n  LOAD_USER_POSTS_FAILURE,\n  LOAD_USER_POSTS_REQUEST,\n  LOAD_USER_POSTS_SUCCESS,\n  REMOVE_POST_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  RETWEET_FAILURE,\n  RETWEET_REQUEST,\n  RETWEET_SUCCESS,\n  UNLIKE_POST_FAILURE,\n  UNLIKE_POST_REQUEST,\n  UNLIKE_POST_SUCCESS,\n  UPLOAD_IMAGES_FAILURE,\n  UPLOAD_IMAGES_REQUEST,\n  UPLOAD_IMAGES_SUCCESS,\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nexport default function* postSaga() {\n  function loadUserPostsAPI(data, lastId) {\n    return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);\n  }\n\n  function loadHashtagPostsAPI(data, lastId) {\n    return axios.get(\n      `/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`\n    );\n  }\n\n  function loadPostAPI(data) {\n    return axios.get(`/post/${data}`);\n  }\n\n  function loadPostsAPI(lastId) {\n    return axios.get(`/posts?lastId=${lastId || 0}`); // GET만의 이점: URL로 데이터 캐싱 가능\n  }\n\n  function addPostAPI(data) {\n    return axios.post('/post', data);\n  }\n\n  function removePostAPI(data) {\n    return axios.delete(`/post/${data}`);\n  }\n\n  function addCommentAPI(data) {\n    return axios.post(`/post/${data.postId}/comment`, data);\n  }\n\n  function likePostAPI(data) {\n    return axios.patch(`/post/${data}/like`); // data를 서버에 보내는 것도 용량 차지하므로, params로 한번에 처리하자!\n  }\n\n  function unlikePostAPI(data) {\n    return axios.delete(`/post/${data}/like`);\n  }\n\n  function uploadImagesAPI(data) {\n    return axios.post('/post/images', data);\n  }\n\n  function retweetAPI(data) {\n    return axios.post(`/post/${data}/retweet`);\n  }\n\n  function* likePost(action) {\n    try {\n      const result = yield call(likePostAPI, action.data);\n      yield put({ type: LIKE_POST_SUCCESS, data: result.data });\n    } catch (err) {\n      console.error(err);\n      yield put({ type: LIKE_POST_FAILURE, error: err.response.data });\n    }\n  }\n\n  function* unlikePost(action) {\n    try {\n      const result = yield call(unlikePostAPI, action.data);\n      yield put({ type: UNLIKE_POST_SUCCESS, data: result.data });\n    } catch (err) {\n      console.error(err);\n      yield put({ type: UNLIKE_POST_FAILURE, error: err.response.data });\n    }\n  }\n\n  function* loadPost(action) {\n    try {\n      const result = yield call(loadPostAPI, action.data);\n      yield put({\n        type: LOAD_POST_SUCCESS,\n        data: result.data,\n      });\n    } catch (err) {\n      console.error(err);\n      yield put({\n        type: LOAD_POST_FAILURE,\n        error: err.response.data,\n      });\n    }\n  }\n\n  function* loadUserPosts(action) {\n    try {\n      const result = yield call(loadUserPostsAPI, action.data, action.lastId);\n      yield put({\n        type: LOAD_USER_POSTS_SUCCESS,\n        data: result.data,\n      });\n    } catch (err) {\n      console.error(err);\n      yield put({\n        type: LOAD_USER_POSTS_FAILURE,\n        error: err.response.data,\n      });\n    }\n  }\n\n  function* loadHashtagPosts(action) {\n    try {\n      const result = yield call(\n        loadHashtagPostsAPI,\n        action.data,\n        action.lastId\n      );\n      yield put({\n        type: LOAD_HASHTAG_POSTS_SUCCESS,\n        data: result.data,\n      });\n    } catch (err) {\n      console.error(err);\n      yield put({\n        type: LOAD_HASHTAG_POSTS_FAILURE,\n        error: err.response.data,\n      });\n    }\n  }\n\n  function* loadPosts(action) {\n    try {\n      const result = yield call(loadPostsAPI, action.lastId);\n      yield put({\n        type: LOAD_POSTS_SUCCESS,\n        data: result.data,\n      });\n    } catch (err) {\n      console.error(err);\n      yield put({\n        type: LOAD_POSTS_FAILURE,\n        error: err.response.data,\n      });\n    }\n  }\n\n  function* addPost(action) {\n    try {\n      const result = yield call(addPostAPI, action.data);\n      yield put({\n        type: ADD_POST_SUCCESS,\n        data: result.data,\n      });\n      yield put({\n        type: ADD_POST_TO_ME,\n        data: result.data.id,\n      });\n    } catch (err) {\n      console.error(err);\n      yield put({\n        type: ADD_POST_FAILURE,\n        error: err.response.data,\n      });\n    }\n  }\n\n  function* removePost(action) {\n    try {\n      const result = yield call(removePostAPI, action.data);\n      yield put({\n        type: REMOVE_POST_SUCCESS,\n        data: result.data,\n      });\n      yield put({\n        type: REMOVE_POST_OF_ME,\n        data: action.data,\n      });\n    } catch (err) {\n      console.error(err);\n      yield put({\n        type: REMOVE_POST_FAILURE,\n        error: err.response.data,\n      });\n    }\n  }\n\n  function* addComment(action) {\n    try {\n      const result = yield call(addCommentAPI, action.data);\n      yield put({\n        type: ADD_COMMENT_SUCCESS,\n        data: result.data,\n      });\n    } catch (err) {\n      console.error(err);\n      yield put({\n        type: ADD_COMMENT_FAILURE,\n        error: err.response.data,\n      });\n    }\n  }\n\n  function* uploadImages(action) {\n    try {\n      const result = yield call(uploadImagesAPI, action.data);\n      yield put({\n        type: UPLOAD_IMAGES_SUCCESS,\n        data: result.data,\n      });\n    } catch (err) {\n      console.error(err);\n      yield put({\n        type: UPLOAD_IMAGES_FAILURE,\n        error: err.response.data,\n      });\n    }\n  }\n\n  function* retweet(action) {\n    try {\n      const result = yield call(retweetAPI, action.data);\n      yield put({\n        type: RETWEET_SUCCESS,\n        data: result.data,\n      });\n    } catch (err) {\n      console.error(err);\n      yield put({\n        type: RETWEET_FAILURE,\n        error: err.response.data,\n      });\n    }\n  }\n\n  function* watchLikePost() {\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\n  }\n  function* watchUnlikePost() {\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n  }\n  function* watchLoadPost() {\n    yield throttle(5000, LOAD_POST_REQUEST, loadPost);\n  }\n  function* watchLoadPosts() {\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n  }\n  function* watchLoadUserPosts() {\n    yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\n  }\n  function* watchLoadHashtagPosts() {\n    yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n  }\n  function* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n  }\n  function* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n  }\n\n  function* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n  }\n\n  function* watchUploadImages() {\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n  }\n\n  function* watchRetweet() {\n    yield takeLatest(RETWEET_REQUEST, retweet);\n  }\n\n  yield all([\n    fork(watchLikePost),\n    fork(watchUnlikePost),\n    fork(watchLoadPost),\n    fork(watchLoadPosts),\n    fork(watchLoadUserPosts),\n    fork(watchLoadHashtagPosts),\n    fork(watchAddPost),\n    fork(watchRemovePost),\n    fork(watchAddComment),\n    fork(watchUploadImages),\n    fork(watchRetweet),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}