{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/odongjae/Desktop/2022Study/codestates/project/react-sns/front/components/CommentForm.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { Form, Input, Button } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useInput from '../hooks/useInput';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\nvar CommentForm = function CommentForm(_ref) {\n  _s();\n\n  var post = _ref.post;\n  var dispatch = useDispatch();\n  var id = useSelector(function (state) {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      addCommentDone = _useSelector.addCommentDone,\n      addCommentLoading = _useSelector.addCommentLoading;\n\n  var _useInput = useInput(''),\n      _useInput2 = _slicedToArray(_useInput, 3),\n      commentText = _useInput2[0],\n      onChangeCommentText = _useInput2[1],\n      setCommentText = _useInput2[2];\n\n  useEffect(function () {\n    if (addCommentDone) {\n      setCommentText('');\n    }\n  }, [addCommentDone]);\n  var onSubmitComment = useCallback(function () {\n    // console.log(post.id, commentText);\n    if (commentText === '' || commentText.trim() === '') {\n      return alert('댓글을 입력해주세요.');\n    }\n\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        content: commentText,\n        postId: post.id,\n        userId: id\n      }\n    });\n  }, [commentText, id]);\n  return __jsx(Form, {\n    onFinish: onSubmitComment,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, __jsx(Form.Item, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, __jsx(Input.TextArea, {\n    value: commentText,\n    onChange: onChangeCommentText,\n    placeholder: \"\\uB313\\uAE00\\uC744 \\uC801\\uC5B4 \\uC8FC\\uC138\\uC694.\",\n    rows: 4,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: addCommentLoading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, \"\\uC090\\uC57D\")));\n};\n\n_s(CommentForm, \"TkQ1pkz5HHxeoLHkjeNQHPXXfhA=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useInput];\n});\n\n_c = CommentForm;\nCommentForm.propTypes = {\n  post: PropTypes.object.isRequired\n};\nexport default CommentForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentForm\");","map":{"version":3,"sources":["/Users/odongjae/Desktop/2022Study/codestates/project/react-sns/front/components/CommentForm.js"],"names":["Form","Input","Button","PropTypes","React","useCallback","useEffect","useState","useDispatch","useSelector","useInput","ADD_COMMENT_REQUEST","CommentForm","post","dispatch","id","state","user","me","addCommentDone","addCommentLoading","commentText","onChangeCommentText","setCommentText","onSubmitComment","trim","alert","type","data","content","postId","userId","propTypes","object","isRequired"],"mappings":";;;;;;;AAAA,SAASA,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,QAAoC,MAApC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,SAASC,mBAAT,QAAoC,kBAApC;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAc;AAAA;;AAAA,MAAXC,IAAW,QAAXA,IAAW;AAChC,MAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,MAAMO,EAAE,GAAGN,WAAW,CAAC,UAACO,KAAD;AAAA;;AAAA,6BAAWA,KAAK,CAACC,IAAN,CAAWC,EAAtB,mDAAW,eAAeH,EAA1B;AAAA,GAAD,CAAtB;;AACA,qBAA8CN,WAAW,CACvD,UAACO,KAAD;AAAA,WAAWA,KAAK,CAACH,IAAjB;AAAA,GADuD,CAAzD;AAAA,MAAQM,cAAR,gBAAQA,cAAR;AAAA,MAAwBC,iBAAxB,gBAAwBA,iBAAxB;;AAGA,kBAA2DV,QAAQ,CAAC,EAAD,CAAnE;AAAA;AAAA,MAAOW,WAAP;AAAA,MAAoBC,mBAApB;AAAA,MAAyCC,cAAzC;;AAEAjB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIa,cAAJ,EAAoB;AAClBI,MAAAA,cAAc,CAAC,EAAD,CAAd;AACD;AACF,GAJQ,EAIN,CAACJ,cAAD,CAJM,CAAT;AAMA,MAAMK,eAAe,GAAGnB,WAAW,CAAC,YAAM;AACxC;AACA,QAAIgB,WAAW,KAAK,EAAhB,IAAsBA,WAAW,CAACI,IAAZ,OAAuB,EAAjD,EAAqD;AACnD,aAAOC,KAAK,CAAC,aAAD,CAAZ;AACD;;AACDZ,IAAAA,QAAQ,CAAC;AACPa,MAAAA,IAAI,EAAEhB,mBADC;AAEPiB,MAAAA,IAAI,EAAE;AAAEC,QAAAA,OAAO,EAAER,WAAX;AAAwBS,QAAAA,MAAM,EAAEjB,IAAI,CAACE,EAArC;AAAyCgB,QAAAA,MAAM,EAAEhB;AAAjD;AAFC,KAAD,CAAR;AAID,GATkC,EAShC,CAACM,WAAD,EAAcN,EAAd,CATgC,CAAnC;AAWA,SACE,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAES,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD,CAAO,QAAP;AACE,IAAA,KAAK,EAAEH,WADT;AAEE,IAAA,QAAQ,EAAEC,mBAFZ;AAGE,IAAA,WAAW,EAAC,qDAHd;AAIE,IAAA,IAAI,EAAE,CAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAOE,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,QAAQ,EAAC,QAAhC;AAAyC,IAAA,OAAO,EAAEF,iBAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPF,CADF,CADF;AAeD,CAxCD;;GAAMR,W;UACaJ,W,EACNC,W,EACmCA,W,EAGaC,Q;;;KANvDE,W;AA0CNA,WAAW,CAACoB,SAAZ,GAAwB;AACtBnB,EAAAA,IAAI,EAAEV,SAAS,CAAC8B,MAAV,CAAiBC;AADD,CAAxB;AAIA,eAAetB,WAAf","sourcesContent":["import { Form, Input, Button } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useInput from '../hooks/useInput';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\nconst CommentForm = ({ post }) => {\n  const dispatch = useDispatch();\n  const id = useSelector((state) => state.user.me?.id);\n  const { addCommentDone, addCommentLoading } = useSelector(\n    (state) => state.post\n  );\n  const [commentText, onChangeCommentText, setCommentText] = useInput('');\n\n  useEffect(() => {\n    if (addCommentDone) {\n      setCommentText('');\n    }\n  }, [addCommentDone]);\n\n  const onSubmitComment = useCallback(() => {\n    // console.log(post.id, commentText);\n    if (commentText === '' || commentText.trim() === '') {\n      return alert('댓글을 입력해주세요.');\n    }\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: { content: commentText, postId: post.id, userId: id },\n    });\n  }, [commentText, id]);\n\n  return (\n    <Form onFinish={onSubmitComment}>\n      <Form.Item>\n        <Input.TextArea\n          value={commentText}\n          onChange={onChangeCommentText}\n          placeholder=\"댓글을 적어 주세요.\"\n          rows={4}\n        />\n        <Button type=\"primary\" htmlType=\"submit\" loading={addCommentLoading}>\n          삐약\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nCommentForm.propTypes = {\n  post: PropTypes.object.isRequired,\n};\n\nexport default CommentForm;\n"]},"metadata":{},"sourceType":"module"}