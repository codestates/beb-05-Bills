{"ast":null,"code":"// configureStore.js\nimport { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport reducer from '../reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootSaga from '../sagas';\nimport createSagaMiddleware from 'redux-saga';\n\nvar loggerMiddleware = // 원래 action은 객체이지만, thunk에서는 함수로 둘 수 있다. 함수를 반환함으로써 나중에 비동기 처리 가능!\nfunction loggerMiddleware(_ref) {\n  var dispatch = _ref.dispatch,\n      getState = _ref.getState;\n  return function (next) {\n    return function (action) {\n      if (typeof action === 'function') {\n        return action(dispatch, getState);\n      }\n\n      console.log(action);\n      return next(action); // 다음 미들웨어(리듀서)에게 액션을 전달하고, dispatch(action)의 결과를 반환한다.\n    };\n  };\n};\n\nvar configureStore = function configureStore() {\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware, loggerMiddleware];\n  var enhancer = // 리덕스의 기능이 확장되었으므로 enhancer\n  false ? compose(applyMiddleware.apply(void 0, middlewares)) : composeWithDevTools(applyMiddleware.apply(void 0, middlewares));\n  var store = createStore(reducer, enhancer); // store : state와 reducer의 통칭\n\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nvar wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["/Users/odongjae/Desktop/2022Study/codestates/project/beb-05-Bills/front/store/configureStore.js"],"names":["createWrapper","applyMiddleware","compose","createStore","reducer","composeWithDevTools","rootSaga","createSagaMiddleware","loggerMiddleware","dispatch","getState","next","action","console","log","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA;AACA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,oBAAP,MAAiC,YAAjC;;AAEA,IAAMC,gBAAgB,GACpB;AAGE,SAJEA,gBAIF;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,MAAaC,QAAb,QAAaA,QAAb;AAAA,SACA,UAACC,IAAD;AAAA,WACA,UAACC,MAAD,EAAY;AACV,UAAI,OAAOA,MAAP,KAAkB,UAAtB,EAAkC;AAChC,eAAOA,MAAM,CAACH,QAAD,EAAWC,QAAX,CAAb;AACD;;AACDG,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,aAAOD,IAAI,CAACC,MAAD,CAAX,CALU,CAKW;AACtB,KAPD;AAAA,GADA;AAAA,CAJJ;;AAcA,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,MAAMC,cAAc,GAAGT,oBAAoB,EAA3C;AACA,MAAMU,WAAW,GAAG,CAACD,cAAD,EAAiBR,gBAAjB,CAApB;AACA,MAAMU,QAAQ,GAAG;AACf,UACIhB,OAAO,CAACD,eAAe,MAAf,SAAmBgB,WAAnB,CAAD,CADX,GAEIZ,mBAAmB,CAACJ,eAAe,MAAf,SAAmBgB,WAAnB,CAAD,CAHzB;AAIA,MAAME,KAAK,GAAGhB,WAAW,CAACC,OAAD,EAAUc,QAAV,CAAzB,CAP2B,CAOmB;;AAC9CC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBf,QAAnB,CAAjB;AACA,SAAOa,KAAP;AACD,CAVD;;AAYA,IAAMG,OAAO,GAAGtB,aAAa,CAACe,cAAD,EAAiB;AAC5CQ,EAAAA,KAAK;AADuC,CAAjB,CAA7B;AAIA,eAAeD,OAAf","sourcesContent":["// configureStore.js\nimport { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport reducer from '../reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootSaga from '../sagas';\nimport createSagaMiddleware from 'redux-saga';\n\nconst loggerMiddleware =\n  // 원래 action은 객체이지만, thunk에서는 함수로 둘 수 있다. 함수를 반환함으로써 나중에 비동기 처리 가능!\n\n\n    ({ dispatch, getState }) =>\n    (next) =>\n    (action) => {\n      if (typeof action === 'function') {\n        return action(dispatch, getState);\n      }\n      console.log(action);\n      return next(action); // 다음 미들웨어(리듀서)에게 액션을 전달하고, dispatch(action)의 결과를 반환한다.\n    };\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware, loggerMiddleware];\n  const enhancer = // 리덕스의 기능이 확장되었으므로 enhancer\n    process.env.NODE_ENV === 'production'\n      ? compose(applyMiddleware(...middlewares))\n      : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer); // store : state와 reducer의 통칭\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: process.env.NODE_ENV === 'development',\n});\n\nexport default wrapper;\n"]},"metadata":{},"sourceType":"module"}