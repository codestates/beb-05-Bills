{"ast":null,"code":"var _jsxFileName = \"/Users/odongjae/Desktop/2022Study/codestates/project/beb-05-Bills/front/components/PostCard.js\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Link from 'next/link';\nimport { Popover, Avatar, Button, Card, Comment, List } from 'antd';\nimport { RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined, HeartTwoTone } from '@ant-design/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PostImages from './PostImages';\nimport CommentForm from './CommentForm';\nimport PostCardContent from './PostCardContent';\nimport FollowButton from './FollowButton';\nimport { LIKE_POST_REQUEST, REMOVE_POST_REQUEST, RETWEET_REQUEST, UNLIKE_POST_REQUEST } from '../reducers/post';\n\nconst PostCard = ({\n  post\n}) => {\n  var _post$Retweet$User, _post$Retweet$User2, _post$User, _post$User2;\n\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    removePostLoading\n  } = useSelector(state => state.post);\n  const id = me === null || me === void 0 ? void 0 : me.id; // 로그인을 했다면 id가 있을 것임.\n\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const onLike = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onUnlike = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  const onRemovePost = useCallback(() => {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onRetweet = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const liked = post.Likers.find(v => v.id === id);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, __jsx(Card, {\n    cover: post.Images && post.Images[0] && __jsx(PostImages, {\n      images: post.Images,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 44\n      }\n    }),\n    actions: [__jsx(RetweetOutlined, {\n      key: \"retweet\",\n      onClick: onRetweet,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }), liked ? __jsx(HeartTwoTone, {\n      key: \"heart\",\n      twoToneColor: \"#eb2f96\",\n      onClick: onUnlike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }) : __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onLike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }\n    }), __jsx(MessageOutlined, {\n      key: \"comment\",\n      onClick: onToggleComment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }\n    }), __jsx(Popover, {\n      key: \"more\",\n      content: __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 15\n        }\n      }, id && id === post.User.id ? __jsx(React.Fragment, null, __jsx(Button, {\n        type: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }\n      }, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        loading: removePostLoading,\n        onClick: onRemovePost,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 19\n        }\n      }, \"\\uC2E0\\uACE0\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }\n    }, __jsx(EllipsisOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    }))],\n    title: post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : '',\n    extra: me && __jsx(FollowButton, {\n      post: post,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 22\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, post.RetweetId && post.Retweet ? __jsx(Card, {\n    cover: post.Retweet.Images && post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: `/user/${post.Retweet.User.id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 19\n      }\n    }, __jsx(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }\n    }, (_post$Retweet$User = post.Retweet.User) === null || _post$Retweet$User === void 0 ? void 0 : _post$Retweet$User.nickname[0]))),\n    title: (_post$Retweet$User2 = post.Retweet.User) === null || _post$Retweet$User2 === void 0 ? void 0 : _post$Retweet$User2.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post === null || post === void 0 ? void 0 : post.Retweet.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 28\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  })) : __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: `/user/${post.User.id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 15\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }\n    }, __jsx(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 19\n      }\n    }, (_post$User = post.User) === null || _post$User === void 0 ? void 0 : _post$User.nickname[0]))),\n    title: (_post$User2 = post.User) === null || _post$User2 === void 0 ? void 0 : _post$User2.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post === null || post === void 0 ? void 0 : post.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 26\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }\n  })), commentFormOpened && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, __jsx(CommentForm, {\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  }), __jsx(List, {\n    header: `${post.Comments.length}개의 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments,\n    renderItem: item => __jsx(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 15\n      }\n    }, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Link, {\n        href: `/user/${item.User.id}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }\n      }, __jsx(\"a\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 23\n        }\n      }, __jsx(Avatar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 25\n        }\n      }, item.User.nickname[0]))),\n      content: item.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object),\n    Likers: PropTypes.arrayOf(PropTypes.object),\n    RetweetId: PropTypes.number,\n    Retweet: PropTypes.objectOf(PropTypes.any)\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["/Users/odongjae/Desktop/2022Study/codestates/project/beb-05-Bills/front/components/PostCard.js"],"names":["React","useCallback","useEffect","useState","PropTypes","Link","Popover","Avatar","Button","Card","Comment","List","RetweetOutlined","HeartOutlined","MessageOutlined","EllipsisOutlined","HeartTwoTone","useDispatch","useSelector","PostImages","CommentForm","PostCardContent","FollowButton","LIKE_POST_REQUEST","REMOVE_POST_REQUEST","RETWEET_REQUEST","UNLIKE_POST_REQUEST","PostCard","post","dispatch","me","state","user","removePostLoading","id","commentFormOpened","setCommentFormOpened","onLike","alert","type","data","onUnlike","onToggleComment","prev","onRemovePost","onRetweet","liked","Likers","find","v","Images","User","RetweetId","nickname","Retweet","content","Comments","length","item","propTypes","shape","number","object","string","createdAt","arrayOf","objectOf","any","isRequired"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Link from 'next/link';\nimport { Popover, Avatar, Button, Card, Comment, List } from 'antd';\nimport {\n  RetweetOutlined,\n  HeartOutlined,\n  MessageOutlined,\n  EllipsisOutlined,\n  HeartTwoTone,\n} from '@ant-design/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PostImages from './PostImages';\nimport CommentForm from './CommentForm';\nimport PostCardContent from './PostCardContent';\nimport FollowButton from './FollowButton';\nimport {\n  LIKE_POST_REQUEST,\n  REMOVE_POST_REQUEST,\n  RETWEET_REQUEST,\n  UNLIKE_POST_REQUEST,\n} from '../reducers/post';\n\nconst PostCard = ({ post }) => {\n  const dispatch = useDispatch();\n  const { me } = useSelector((state) => state.user);\n  const { removePostLoading } = useSelector((state) => state.post);\n  const id = me?.id; // 로그인을 했다면 id가 있을 것임.\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\n\n  const onLike = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n    return dispatch({ type: LIKE_POST_REQUEST, data: post.id });\n  }, [id]);\n  const onUnlike = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n    return dispatch({ type: UNLIKE_POST_REQUEST, data: post.id });\n  }, [id]);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened((prev) => !prev);\n  }, []);\n\n  const onRemovePost = useCallback(() => {\n    dispatch({ type: REMOVE_POST_REQUEST, data: post.id });\n  }, [id]);\n\n  const onRetweet = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n    return dispatch({ type: RETWEET_REQUEST, data: post.id });\n  }, [id]);\n  const liked = post.Likers.find((v) => v.id === id);\n\n  return (\n    <div>\n      <Card\n        cover={\n          post.Images && post.Images[0] && <PostImages images={post.Images} />\n        }\n        actions={[\n          <RetweetOutlined key=\"retweet\" onClick={onRetweet} />,\n          liked ? (\n            <HeartTwoTone\n              key=\"heart\"\n              twoToneColor=\"#eb2f96\"\n              onClick={onUnlike}\n            />\n          ) : (\n            <HeartOutlined key=\"heart\" onClick={onLike} />\n          ),\n          <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\n          <Popover\n            key=\"more\"\n            content={\n              <Button.Group>\n                {id && id === post.User.id ? (\n                  <>\n                    <Button type=\"primary\">수정</Button>\n                    <Button\n                      type=\"danger\"\n                      loading={removePostLoading}\n                      onClick={onRemovePost}\n                    >\n                      삭제\n                    </Button>\n                  </>\n                ) : (\n                  <Button>신고</Button>\n                )}\n              </Button.Group>\n            }\n          >\n            <EllipsisOutlined />\n          </Popover>,\n        ]}\n        title={\n          post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : ''\n        }\n        extra={me && <FollowButton post={post} />}\n      >\n        {post.RetweetId && post.Retweet ? (\n          <Card\n            cover={\n              post.Retweet.Images &&\n              post.Retweet.Images[0] && (\n                <PostImages images={post.Retweet.Images} />\n              )\n            }\n          >\n            <Card.Meta\n              avatar={\n                <Link href={`/user/${post.Retweet.User.id}`}>\n                  <a>\n                    <Avatar>{post.Retweet.User?.nickname[0]}</Avatar>\n                  </a>\n                </Link>\n              }\n              title={post.Retweet.User?.nickname}\n              description={<PostCardContent postData={post?.Retweet.content} />}\n            />\n          </Card>\n        ) : (\n          <Card.Meta\n            avatar={\n              <Link href={`/user/${post.User.id}`}>\n                <a>\n                  <Avatar>{post.User?.nickname[0]}</Avatar>\n                </a>\n              </Link>\n            }\n            title={post.User?.nickname}\n            description={<PostCardContent postData={post?.content} />}\n          />\n        )}\n        {/* <Content /> */}\n        {/* <Buttons></Buttons> */}\n      </Card>\n      {commentFormOpened && (\n        <div>\n          <CommentForm post={post} />\n          {/* post : 댓글이 어느 포스트에 속하는지 알리기 위한 props */}\n          <List\n            header={`${post.Comments.length}개의 댓글`}\n            itemLayout=\"horizontal\"\n            dataSource={post.Comments}\n            renderItem={(item) => (\n              <li>\n                <Comment\n                  author={item.User.nickname}\n                  avatar={\n                    <Link href={`/user/${item.User.id}`}>\n                      <a>\n                        <Avatar>{item.User.nickname[0]}</Avatar>\n                      </a>\n                    </Link>\n                  }\n                  content={item.content}\n                />\n              </li>\n            )}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object),\n    Likers: PropTypes.arrayOf(PropTypes.object),\n    RetweetId: PropTypes.number,\n    Retweet: PropTypes.objectOf(PropTypes.any),\n  }).isRequired,\n};\n\nexport default PostCard;\n"]},"metadata":{},"sourceType":"module"}